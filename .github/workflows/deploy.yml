name: Production Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - staging
          - production
      confirm:
        description: 'Type "deploy" to confirm'
        required: true
        default: 'deploy'
  push:
    tags:
      - 'v*'

jobs:
  deploy-client:
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.confirm == 'deploy' || github.event_name == 'push' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18.x

    - name: Install dependencies
      working-directory: client
      run: npm ci

    - name: Build client
      working-directory: client
      run: npm run build

    - name: Deploy to Firebase
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT }}'
        projectId: ${{ secrets.FIREBASE_PROJECT_ID }}
        channelId: ${{ github.event.inputs.environment == 'staging' && 'staging' || 'live' }}

  deploy-server:
    runs-on: ubuntu-latest
    needs: deploy-client
    if: ${{ github.event.inputs.confirm == 'deploy' || github.event_name == 'push' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push server image
      uses: docker/build-push-action@v4
      with:
        context: server
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/mustang-server:latest
          ${{ secrets.DOCKER_USERNAME }}/mustang-server:${{ github.sha }}

    - name: Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.12
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: 'mustang-backend'
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        usedocker: true
        dockerfile: "server/Dockerfile"
        appdir: "server"

  post-deploy:
    runs-on: ubuntu-latest
    needs: deploy-server
    steps:
    - name: Run health check
      run: |
        curl -sSf https://api.mustang.example.com/health/ready
    - name: Send deployment notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        STATUS: ${{ job.status }}